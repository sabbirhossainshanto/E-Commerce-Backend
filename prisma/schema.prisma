generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  password     String
  role         Role       @default(USER)
  profilePhoto String?
  status       UserStatus @default(ACTIVE)
  isDeleted    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  Cart            Cart[]
  vendor          Shop?
  orders          Order[]
  reviews         Review[]
  followedVendors UserVendorFollow[]
}

model Shop {
  id          String  @id @default(uuid())
  shopName    String
  shopLogo    String?
  shopDetails String?
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id])

  products  Product[]
  orders    Order[]
  followers UserVendorFollow[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@map("shop")
}

model UserVendorFollow {
  id        String   @id @default(uuid())
  userId    String
  vendorId  String
  user      User     @relation(fields: [userId], references: [id])
  vendor    Shop     @relation(fields: [vendorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, vendorId]) // Prevent duplicate follows
}

model Product {
  id           String         @id @default(uuid())
  name         String
  description  String
  price        Float
  inventory    Int
  categoryId   String
  vendorId     String
  category     Category       @relation(fields: [categoryId], references: [id])
  vendor       Shop           @relation(fields: [vendorId], references: [id])
  reviews      Review[]
  images       String[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  OrderProduct OrderProduct[]
  CartProduct  CartProduct[]
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id         String         @id @default(uuid())
  userId     String
  vendorId   String
  totalPrice Float
  status     OrderStatus
  user       User           @relation(fields: [userId], references: [id])
  vendor     Shop           @relation(fields: [vendorId], references: [id])
  products   OrderProduct[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model OrderProduct {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  rating    Int      @default(0)
  comment   String?
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String        @id @default(uuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  cartItems CartProduct[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model CartProduct {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  VENDOR
  USER
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum UserStatus {
  ACTIVE
  BLOCKED
}
